ignore class GrammarRules {
 Soi
 GrammarRule
+ Eoi
}
class GrammarRule {
 Identifier
 AssignmentOperator
 Modifier
? OpeningBrace
 Expression
 ClosingBrace
}
class AssignmentOperator {
 "="
}
class OpeningBrace {
 "{"
}
class ClosingBrace {
 "}"
}
class OpeningParen {
 "("
}
class ClosingParen {
 ")"
}
class OpeningBrack {
 "["
}
class ClosingBrack {
 "]"
}
ignore class Modifier {
 SilentModifier
 |  AtomicModifier
 |  CompoundAtomicModifier
 |  NonAtomicModifier
}
class SilentModifier {
 "_"
}
class AtomicModifier {
 "@"
}
class CompoundAtomicModifier {
 "$"
}
class NonAtomicModifier {
 "!"
}
class Expression {
 Term
( InfixOperator
 Term
)*}
class Term {
 PrefixOperator
* Node
 PostfixOperator
*}
ignore class Node {
 OpeningParen
 Expression
 ClosingParen
 |  Terminal
}
ignore class Terminal {
 Push
 |  PeekSlice
 |  Identifier
 |  String
 |  InsensitiveString
 |  Range
}
ignore class PrefixOperator {
 PositivePredicateOperator
 |  NegativePredicateOperator
}
ignore class InfixOperator {
 SequenceOperator
 |  ChoiceOperator
}
ignore class PostfixOperator {
 OptionalOperator
 |  RepeatOperator
 |  RepeatOnceOperator
 |  RepeatExact
 |  RepeatMin
 |  RepeatMax
 |  RepeatMinMax
}
class PositivePredicateOperator {
 "&"
}
class NegativePredicateOperator {
 "!"
}
class SequenceOperator {
 "~"
}
class ChoiceOperator {
 "|"
}
class OptionalOperator {
 "?"
}
class RepeatOperator {
 "*"
}
class RepeatOnceOperator {
 "+"
}
class RepeatExact {
 OpeningBrace
 Number
 ClosingBrace
}
class RepeatMin {
 OpeningBrace
 Number
 Comma
 ClosingBrace
}
class RepeatMax {
 OpeningBrace
 Comma
 Number
 ClosingBrace
}
class RepeatMinMax {
 OpeningBrace
 Number
 Comma
 Number
 ClosingBrace
}
atomic class Number {
 [0-9]
+}
atomic class Integer {
 Number
 |  "-"
 "0"
* [1-9]
 Number
?}
class Comma {
 ","
}
class Push {
 "PUSH"
 OpeningParen
 Expression
 ClosingParen
}
class PeekSlice {
 "PEEK"
 OpeningBrack
 Integer
? RangeOperator
 Integer
? ClosingBrack
}
atomic class Identifier {
! "PUSH"
 "_"
 |  Alpha
( "_"
 |  AlphaNum
)*}
ignore class Alpha {
 [a-z]
 |  [A-Z]
}
ignore class AlphaNum {
 Alpha
 |  [0-9]
}
atomic class String {
 Quote
 InnerStr
 Quote
}
class InsensitiveString {
 "^"
 String
}
class Range {
 Character
 RangeOperator
 Character
}
atomic class Character {
 SingleQuote
 InnerChr
 SingleQuote
}
atomic class InnerStr {
@skip(", \)( Escape
 InnerStr
)?}
atomic class InnerChr {
 Escape
 |  Any
}
atomic class Escape {
 "\\"
 "\""
 |  "\\"
 |  "r"
 |  "n"
 |  "t"
 |  "0"
 |  "'"
 |  Code
 |  Unicode
}
atomic class Code {
 "x"
 HexDigit
 HexDigit
}
atomic class Unicode {
 "u"
 OpeningBrace
 HexDigit
 HexDigit
 HexDigit
? HexDigit
? HexDigit
? HexDigit
? ClosingBrace
}
atomic class HexDigit {
 [0-9]
 |  [a-f]
 |  [A-F]
}
class Quote {
 "\""
}
class SingleQuote {
 "'"
}
class RangeOperator {
 ".."
}
ignore class Newline {
 "\n"
 |  "\r\n"
}
ignore class Whitespace {
 " "
 |  "\t"
 |  Newline
}
ignore class BlockComment {
 "/*"
( BlockComment
 | ! "*/"
 Any
)* "*/"
}
ignore class Comment {
 BlockComment
 |  "//"
(! Newline
 Any
)*}
